generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model amenities {
  id          Int           @id @default(autoincrement())
  text_id     String?
  property_id Int
  description String
  fee         Decimal       @db.Decimal(5, 2)
  property    property      @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reserved_by reserved_by[]

  @@unique([id, property_id])
}

model condo_management_files {
  file_key             String               @id
  file_type            file_type?           @default(other)
  company_id           Int
  property_id          Int
  description          String?
  signed_url           String?
  management_companies management_companies @relation(fields: [company_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  property             property             @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model condo_unit {
  id           Int            @id @default(autoincrement())
  property_id  Int
  unit_number  String
  square_feet  Decimal        @db.Decimal(5, 2)
  image_key    String?
  image_url    String?
  billing      billing[]
  property     property       @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  registration registration[]

  @@unique([property_id, unit_number])
}

model employed_by {
  employee_user_id     Int
  company_id           Int
  start_date           DateTime?            @default(now()) @db.Timestamp(6)
  end_date             DateTime             @db.Timestamp(6)
  management_companies management_companies @relation(fields: [company_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  employee_users       employee_users       @relation(fields: [employee_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([employee_user_id, end_date])
}

model employee_users {
  user_id           Int           @id
  first_name        String
  last_name         String
  role              employee_role
  phone_number      String
  profile_image_key String?
  employed_by       employed_by[]
  users             users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requests          requests[]    @relation("requests_employee_idTopublic_users")
}

model management_companies {
  user_id                Int                      @id
  company_name           String
  address                String
  phone_number           String
  unit_count             Int?                     @default(0)
  condo_management_files condo_management_files[]
  employed_by            employed_by[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  property               property[]
}

model operating_fees {
  id          Int       @id @default(autoincrement())
  property_id Int
  fee         Decimal   @db.Decimal(10, 2)
  description String
  payed_on    DateTime? @default(now()) @db.Timestamp(6)
  property    property  @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model property {
  id                                Int                      @id @default(autoincrement())
  company_id                        Int
  address                           String                   @unique
  image_key                         String?
  flat_fee                          Decimal                  @db.Decimal(10, 2)
  parking_fee                       Decimal?                 @default(0) @db.Decimal(5, 2)
  price_per_square_foot             Decimal?                 @default(0) @db.Decimal(5, 2)
  locker_fee                        Decimal?                 @default(0) @db.Decimal(5, 2)
  amenities                         amenities[]
  condo_management_files            condo_management_files[]
  condo_unit                        condo_unit[]
  operating_fees                    operating_fees[]
  management_companies              management_companies     @relation(fields: [company_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  property_requests_property_idToid requests[]               @relation("requests_property_idToid")
}

model public_users {
  user_id           Int            @id
  first_name        String
  last_name         String
  phone_number      String
  role              user_role?     @default(none)
  profile_image_key String?
  billing           billing[]
  users             users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  registration      registration[]
  requests          requests[]     @relation("requests_condo_owner_idTopublic_users")
  reserved_by       reserved_by[]
}

model registration {
  registration_key String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type             registration_type
  issued_at        DateTime?         @default(now()) @db.Timestamp(6)
  start_date       DateTime?         @default(now()) @db.Timestamp(6)
  end_date         DateTime?         @db.Timestamp(6)
  public_user_id   Int?
  condo_id         Int
  condo_unit       condo_unit        @relation(fields: [condo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  public_users     public_users?     @relation(fields: [public_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([condo_id, end_date], map: "registration_condo_id_end_date")
}

model requests {
  property_id                                        Int
  title                                              String
  description                                        String
  request_priority                                   priority?       @default(low)
  issued_at                                          DateTime        @default(now()) @db.Timestamp(6)
  condo_owner_id                                     Int
  employee_id                                        Int?
  date_needed                                        DateTime?
  id                                                 Int             @id @default(autoincrement())
  status                                             request_status? @default(unassigned)
  notifications                                      notifications[]
  public_users_requests_condo_owner_idTopublic_users public_users    @relation("requests_condo_owner_idTopublic_users", fields: [condo_owner_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  public_users_requests_employee_idTopublic_users    employee_users? @relation("requests_employee_idTopublic_users", fields: [employee_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  property_requests_property_idToid                  property        @relation("requests_property_idToid", fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([condo_owner_id, employee_id, title, issued_at], map: "condo_owner_id_employee_id_title_issued_at")
}

model reserved_by {
  public_user_id Int
  amenities_id   Int
  start_date     DateTime     @default(now()) @db.Timestamp(6)
  end_date       DateTime?    @db.Timestamp(6)
  amenities      amenities    @relation(fields: [amenities_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  public_users   public_users @relation(fields: [public_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([public_user_id, amenities_id, start_date])
}

model users {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique @db.VarChar(255)
  hashed_password      String
  employee_users       employee_users?
  management_companies management_companies?
  public_users         public_users?
}

model billing {
  id             Int             @id @default(autoincrement())
  condo_id       Int
  public_user_id Int
  pay_before     DateTime?       @default(dbgenerated("(CURRENT_DATE + '30 days'::interval)")) @db.Date
  amount         Decimal         @db.Decimal(10, 2)
  status         billing_status? @default(unpaid)
  condo_unit     condo_unit      @relation(fields: [condo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  public_users   public_users    @relation(fields: [public_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([condo_id, public_user_id, pay_before])
}

model notifications {
  id          Int            @id @default(autoincrement())
  request_id  Int
  status      request_status
  inserted_at DateTime?      @default(now()) @db.Timestamp(6)
  seen        Boolean?       @default(false)
  requests    requests       @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum employee_role {
  manager
  daily_operations @map("daily operations")
  finance
  other
}

enum file_type {
  declarations
  annual_budgets        @map("annual budgets")
  board_meeting_minutes @map("board meeting minutes")
  other
}

enum priority {
  low
  medium
  high
}

enum registration_type {
  renter
  owner
}

enum user_role {
  renter
  owner
  none
}

enum billing_status {
  paid
  unpaid
}

enum request_status {
  unassigned
  in_progress
  completed
}
