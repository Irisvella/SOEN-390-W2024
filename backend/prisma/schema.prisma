generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model amenities {
  id          Int           @id @default(autoincrement())
  text_id     String?
  property_id Int?
  description String
  fee         Decimal       @db.Decimal(5, 2)
  property    property?     @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reserved_by reserved_by[]

  @@unique([id, property_id])
}

model condo_management_files {
  file_key             String                @id
  file_type            file_type?            @default(other)
  company_id           Int?
  property_id          Int?
  description          String?
  management_companies management_companies? @relation(fields: [company_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  property             property?             @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employed_by {
  employee_user_id     Int
  company_id           Int?
  start_date           DateTime?             @default(now()) @db.Timestamp(6)
  end_date             DateTime              @db.Timestamp(6)
  management_companies management_companies? @relation(fields: [company_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  employee_users       employee_users        @relation(fields: [employee_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([employee_user_id, end_date])
}

model management_companies {
  user_id                Int                      @id
  company_name           String
  address                String
  phone_number           String
  unit_count             Int?                     @default(0)
  condo_management_files condo_management_files[]
  employed_by            employed_by[]
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  property               property[]
}

model property {
  id                     Int                      @id @default(autoincrement())
  company_id             Int?
  size                   Int
  unit_id                String
  address                String
  condo_fee              Decimal                  @db.Decimal(10, 2)
  image_url              String?
  image_key              String?
  amenities              amenities[]
  condo_management_files condo_management_files[]
  management_companies   management_companies?    @relation(fields: [company_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  registration           registration[]

  @@unique([address, unit_id])
}

model public_users {
  user_id                                        Int            @id
  first_name                                     String
  last_name                                      String
  phone_number                                   String
  role                                           user_role?     @default(none)
  profile_image_key                              String?
  users                                          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  registration                                   registration[]
  requests_requests_condo_owner_idTopublic_users requests[]     @relation("requests_condo_owner_idTopublic_users")
  reserved_by                                    reserved_by[]
}

model requests {
  title                                              String
  description                                        String
  request_priority                                   priority?      @default(low)
  issued_at                                          DateTime       @default(now()) @db.Timestamp(6)
  condo_owner_id                                     Int
  employee_id                                        Int
  public_users_requests_condo_owner_idTopublic_users public_users   @relation("requests_condo_owner_idTopublic_users", fields: [condo_owner_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  public_users_requests_employee_idTopublic_users    employee_users @relation("requests_employee_idTopublic_users", fields: [employee_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([condo_owner_id, employee_id, title, issued_at])
}

model reserved_by {
  public_user_id Int
  amenities_id   Int
  start_date     DateTime     @default(now()) @db.Timestamp(6)
  end_date       DateTime?    @db.Timestamp(6)
  amenities      amenities    @relation(fields: [amenities_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  public_users   public_users @relation(fields: [public_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([public_user_id, amenities_id, start_date])
}

model users {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique @db.VarChar(255)
  hashed_password      String
  employee_users       employee_users?
  management_companies management_companies?
  public_users         public_users?
}

model employee_users {
  user_id                                     Int           @id
  first_name                                  String
  last_name                                   String
  role                                        employee_role
  phone_number                                String
  profile_image_key                           String?
  employed_by                                 employed_by[]
  users                                       users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  requests_requests_employee_idTopublic_users requests[]    @relation("requests_employee_idTopublic_users")
}

model registration {
  registration_key String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type             registration_type
  issued_at        DateTime?         @default(now()) @db.Timestamp(6)
  start_date       DateTime?         @default(now()) @db.Timestamp(6)
  end_date         DateTime?         @db.Timestamp(6)
  public_user_id   Int?
  property_id      Int?
  property         property?         @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  public_users     public_users?     @relation(fields: [public_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([property_id, start_date, end_date])
}

enum file_type {
  declarations
  annual_budgets        @map("annual budgets")
  board_meeting_minutes @map("board meeting minutes")
  other
}

enum priority {
  low
  medium
  high
}

enum registration_type {
  renter
  owner
}

enum employee_role {
  manager
  daily_operations @map("daily operations")
  finance
  other
}

enum user_role {
  renter
  owner
  none
}
